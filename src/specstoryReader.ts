/**
 * ČITELNOST: Soubor musí zůstat vždy plně čitelný pro programátora.
 * Žádné umělé zkracování řádků, slučování nesouvisejících příkazů na jeden řádek
 * ani minifikace. Snížení počtu řádků bez jasného, zdokumentovaného zlepšení
 * čitelnosti je REGRESE a musí být vráceno. Zachovávej logické bloky a vertikální strukturu.
 */

import * as fs from 'fs';
import * as path from 'path';

<<<<<<< HEAD
/** Ověření platnosti SpecStory souboru podle názvu a typických markerů obsahu. */
export function isValidSpecStoryFile(filePath: string): boolean {
	try {
		const fileName = path.basename(filePath);
		const specStoryPattern = /^\d{4}-\d{2}-\d{2}_\d{2}-\d{2}Z-.+\.md$/;
		if (!specStoryPattern.test(fileName)) return false;
		if (!fs.existsSync(filePath)) return false;
		const content = fs.readFileSync(filePath, 'utf8');
		return content.includes('<!-- Generated by SpecStory -->') ||
			   content.includes('_**User**_') ||
			   content.includes('_**Assistant**_');
	} catch { return false; }
}

/** Extrakce promptů uživatele z markdown obsahu konverzace. */
export function extractPromptsFromContent(content: string): string[] {
	const prompts: string[] = [];
	try {
		const sections = content.split(/(?=_\*\*User\*\*_ |_\*\*Assistant\*\*_)/);
		for (let i = 0; i < sections.length; i++) {
			const section = sections[i];
			if (section.includes('_**User**_')) {
				const lines = section.split('\n');
				const userPrompt: string[] = [];
				let foundUserMarker = false;
				for (const line of lines) {
					if (line.includes('_**User**_')) { foundUserMarker = true; continue; }
					if (foundUserMarker) {
						if (line.includes('---') || line.includes('_**Assistant**_')) break;
						const trimmedLine = line.trim();
						if (trimmedLine) userPrompt.push(trimmedLine);
					}
				}
				if (userPrompt.length > 0) { const fullPrompt = userPrompt.join(' ').trim(); if (fullPrompt.length > 0) prompts.push(fullPrompt); }
			}
		}
		return prompts.reverse();
	} catch (error) { writeLog(`Error extracting prompts: ${error}`, false); }
	return prompts;
}

/** Načte soubor a přidá do recentPrompts všechny uživatelské prompty. */
export function loadPromptsFromFile(filePath: string, recentPrompts: string[]): void {
	try {
		const content = fs.readFileSync(filePath, 'utf8');
		const extractedPrompts = extractPromptsFromContent(content);
		extractedPrompts.forEach(prompt => { recentPrompts.push(prompt); });
		writeLog(`📁 Loaded ${extractedPrompts.length} prompts from ${path.basename(filePath)}`, false);
	} catch (error) { writeLog(`Error loading prompts from file: ${error}`, false); }
=======
/**
 * Ověří zda soubor odpovídá očekávanému formátu názvu SpecStory exportu.
 * @param filePath Absolutní cesta k souboru.
 * @returns true pokud název i existence souboru vyhovují.
 */
export function isValidSpecStoryFile(filePath: string): boolean {
  const fileName = path.basename(filePath);
  return (
    /^\d{4}-\d{2}-\d{2}_\d{2}-\d{2}Z-.+\.md$/.test(fileName) &&
    fs.existsSync(filePath)
  );
}

/**
 * Načte prompty z jednoho souboru SpecStory – pořadí v souboru se převrací (collected.reverse())
 * aby nejnovější prompty daného souboru byly dříve a zachovala se globální invariantní logika.
 * Invariant (NEPORUŠIT): Pořadí se připravuje takto:
 * 1. Nasbíráme prompty v pořadí výskytu v souboru (nejstarší -> nejnovější)
 * 2. Poté provedeme collected.reverse() aby nejNOVĚJŠÍ (poslední) byl jako první
 * 3. Výsledek pushujeme do global recent pole v tomto již otočeném pořadí
 * UI (activityBarProvider) NESMÍ přidávat reverse – spoleh na zdejší úpravu.
 * Jakákoliv změna (např. zrušení reverse a náhrada obracením v UI) je REGRESE.
 * @param filePath Cesta k markdown souboru.
 * @param recent Pole do něhož se přidávají nalezené prompty.
 */
export function loadPromptsFromFile(filePath: string, recent: string[]): void {
  try {
    const c = fs.readFileSync(filePath, 'utf8');
    const sections = c.split(/(?=_\*\*User\*\*_)/);
    const collected: string[] = [];
    for (const s of sections) {
      if (s.includes('_**User**_')) {
        const body = s
          .split('\n')
          .slice(1)
          .join(' ')
          .split('---')[0]
          .trim();
        if (body && body.length > 0) collected.push(body);
      }
    }
    // NEODSTRAŇOVAT: Obrácené pořadí v rámci souboru – nejnovější (poslední v souboru) jde první.
    for (const p of collected.reverse()) recent.push(p);
  } catch {}
>>>>>>> refs/remotes/origin/master
}
