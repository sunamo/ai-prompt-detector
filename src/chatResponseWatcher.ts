import * as vscode from 'vscode';
import { writeLog } from './logger';

// Heuristick√Ω watcher sleduj√≠c√≠ otev≈ôen√≠ / zmƒõnu dokument≈Ø souvisej√≠c√≠ch s chatem / Copilotem
// C√≠lem je zachytit sc√©n√°≈ôe, kdy u≈æivatel ode≈°le prompt tlaƒç√≠tkem a jin√° logika jej
// nezaregistruje vƒças. Minimalistick√Ω a odn√≠mateln√Ω.
export function setupChatResponseWatcher(
	context: vscode.ExtensionContext,
	finalize: (source: string, text: string) => void
) {
	const processed = new Set<string>(); // ji≈æ zpracovan√© dokumenty
	let lastCandidate = '';

	/**
	 * Pokus√≠ se heuristicky extrahovat posledn√≠ u≈æivatelsk√Ω prompt z nov√©ho / zmƒõnƒõn√©ho dokumentu.
	 * @param doc Textov√Ω dokument (typicky obsah generovan√Ω chatem)
	 * @param reason D≈Øvod spu≈°tƒõn√≠ (open/change)
	 */
	function tryExtractAndFinalize(doc: vscode.TextDocument, reason: string) {
		try {
			const name = doc.fileName.toLowerCase();
			if (!(name.includes('copilot') || name.includes('chat'))) return; // filtrace pouze na relevantn√≠ dokumenty
			if (processed.has(doc.uri.toString())) return; // zabr√°nƒõn√≠ duplicit√°m
			const full = doc.getText();
			if (full.length < 40) return; // p≈ô√≠li≈° kr√°tk√©
			// Heuristika: prvn√≠ nenulov√Ω ≈ô√°dek kter√Ω nevypad√° jako heading / meta
			const lines = full.split(/\r?\n/);
			let candidate = '';
			for (const ln of lines) {
				const t = ln.trim();
				if (!t) continue;
				if (t.startsWith('#')) continue;
				if (/assistant|copilot/i.test(t)) continue;
				if (t.length < 3) continue;
				candidate = t; break;
			}
			if (!candidate && full.toLowerCase().includes('dispatch')) {
				candidate = full.split(/\r?\n/).find(l=>l.toLowerCase().includes('dispatch'))?.trim() || '';
			}
			if (!candidate) return;
			if (candidate === lastCandidate) return; // duplicitn√≠
			lastCandidate = candidate;
			processed.add(doc.uri.toString());
			writeLog(`üß≤ Heuristic prompt capture (${reason}): "${candidate.substring(0,80)}"`, true);
			finalize(`heuristic-${reason}`, candidate);
		} catch (e) {
			writeLog(`‚ùå heuristic capture error: ${e}`, true);
		}
	}

	context.subscriptions.push(
		vscode.workspace.onDidOpenTextDocument(doc => tryExtractAndFinalize(doc, 'open')),
		vscode.workspace.onDidChangeTextDocument(ev => tryExtractAndFinalize(ev.document, 'change'))
	);
}
