import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';

let statusBarItem: vscode.StatusBarItem;
let promptCount = 0;
let recentPrompts: string[] = [];
let logFile: string;
let outputChannel: vscode.OutputChannel;

function initializeLogging(): void {
	// Use fixed path that works for all users including guest accounts
	const logFolder = path.join('C:', 'temp', 'specstory-autosave-logs');
	
	if (!fs.existsSync(logFolder)) {
		fs.mkdirSync(logFolder, { recursive: true });
	}
	
	logFile = path.join(logFolder, `extension-${new Date().toISOString().split('T')[0]}.log`);
	outputChannel = vscode.window.createOutputChannel('SpecStory AutoSave + AI Copilot Prompt Detection');
	
	writeLog('Extension initialized', 'INFO');
}

function writeLog(message: string, level: 'INFO' | 'ERROR' | 'DEBUG' = 'INFO'): void {
	const config = vscode.workspace.getConfiguration('specstory-autosave');
	const enableDebugLogs = config.get<boolean>('enableDebugLogs', false);
	
	// Skip debug logs if disabled
	if (level === 'DEBUG' && !enableDebugLogs) {
		return;
	}
	
	const timestamp = new Date().toISOString();
	const logEntry = `[${timestamp}] ${level}: ${message}`;
	
	// Write to VS Code output channel
	outputChannel.appendLine(logEntry);
	
	// Write to temp file
	try {
		fs.appendFileSync(logFile, logEntry + '\n');
	} catch (error) {
		console.error('Failed to write log:', error);
	}
}

function isValidSpecStoryFile(filePath: string): boolean {
	try {
		const fileName = path.basename(filePath);
		writeLog(`Validating file: ${fileName}`, 'DEBUG');
		
		// Check if filename matches SpecStory pattern: YYYY-MM-DD_HH-mmZ-*.md
		const specStoryPattern = /^\d{4}-\d{2}-\d{2}_\d{2}-\d{2}Z-.+\.md$/;
		if (!specStoryPattern.test(fileName)) {
			writeLog(`File ${fileName} doesn't match SpecStory pattern`, 'DEBUG');
			return false;
		}
		
		writeLog(`File ${fileName} matches SpecStory pattern`, 'DEBUG');
		
		// Check if file exists and is readable
		if (!fs.existsSync(filePath)) {
			writeLog(`File ${fileName} doesn't exist`, 'DEBUG');
			return false;
		}
		
		// Check if file contains SpecStory header
		const content = fs.readFileSync(filePath, 'utf8');
		const hasSpecStoryMarker = content.includes('<!-- Generated by SpecStory -->') || 
		                          content.includes('_**User**_') || 
		                          content.includes('_**Assistant**_');
		
		writeLog(`File ${fileName} has SpecStory markers: ${hasSpecStoryMarker}`, 'DEBUG');
		return hasSpecStoryMarker;
	} catch (error) {
		writeLog(`Error validating SpecStory file ${filePath}: ${error}`, 'ERROR');
		return false;
	}
}

class RecentPromptsProvider implements vscode.WebviewViewProvider {
	public static readonly viewType = 'specstory-autosave-view';

	private _view?: vscode.WebviewView;
	private prompts: { number: string; shortPrompt: string; fullContent: string; }[] = [];

	constructor(private readonly _extensionUri: vscode.Uri) {}

	public resolveWebviewView(
		webviewView: vscode.WebviewView,
		context: vscode.WebviewViewResolveContext,
		_token: vscode.CancellationToken,
	) {
		this._view = webviewView;

		webviewView.webview.options = {
			enableScripts: true,
			localResourceRoots: [this._extensionUri]
		};

		webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);

		webviewView.webview.onDidReceiveMessage(data => {
			switch (data.type) {
				case 'refresh':
					writeLog('Manual refresh requested from activity bar', 'DEBUG');
					// Refresh file detection
					vscode.workspace.findFiles('**/.specstory/history/*.md').then(files => {
						recentPrompts = [];
						promptCount = 0;
						files.forEach(file => {
							writeLog(`Processing file: ${file.fsPath}`, 'DEBUG');
							if (isValidSpecStoryFile(file.fsPath)) {
								promptCount++;
								addRecentPrompt(file.fsPath);
							}
						});
						updateStatusBar();
						this.refreshFromPrompts();
						writeLog(`Refreshed with ${promptCount} prompts`);
					});
					break;
			}
		});
	}

	public refresh(): void {
		this.refreshFromPrompts();
	}

	private refreshFromPrompts(): void {
		// Convert recentPrompts array to our format
		this.prompts = recentPrompts.map((prompt, index) => {
			const shortPrompt = prompt.length > 120 ? prompt.substring(0, 120) + '...' : prompt;
			return {
				number: `#${index + 1}`,
				shortPrompt: shortPrompt,
				fullContent: prompt
			};
		});
		
		writeLog(`Updating activity bar with ${this.prompts.length} prompts`, 'DEBUG');
		this._updateView();
	}

	private _updateView(): void {
		if (this._view) {
			this._view.webview.html = this._getHtmlForWebview(this._view.webview);
			writeLog('Activity Bar view updated', 'DEBUG');
		}
	}

	private _getHtmlForWebview(webview: vscode.Webview): string {
		const notificationsList = this.prompts.length > 0 
			? this.prompts.map((prompt, index) => {
				return `<div class="notification">
					<div class="notification-header">
						<span class="notification-time">${prompt.number}</span>
					</div>
					<div class="notification-content">
						<div class="notification-title">${prompt.shortPrompt}</div>
					</div>
				</div>`;
			}).join('')
			: '<div class="no-notifications">No AI prompts detected yet...<br><button onclick="refresh()">ðŸ”„ Refresh</button></div>';

		const config = vscode.workspace.getConfiguration('specstory-autosave');
		const maxPrompts = config.get<number>('maxPrompts', 10);

		return `<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			<title>AI Activity</title>
			<style>
				body {
					font-family: var(--vscode-font-family);
					font-size: var(--vscode-font-size);
					line-height: 1.4;
					color: var(--vscode-foreground);
					background-color: var(--vscode-editor-background);
					margin: 0;
					padding: 8px;
				}
				.header {
					display: flex;
					justify-content: space-between;
					align-items: center;
					margin-bottom: 8px;
					padding-bottom: 8px;
					border-bottom: 1px solid var(--vscode-widget-border);
				}
				.header-title {
					font-size: 12px;
					font-weight: bold;
					color: var(--vscode-foreground);
				}
				.header-count {
					font-size: 10px;
					color: var(--vscode-descriptionForeground);
				}
				.notification {
					background-color: var(--vscode-list-hoverBackground);
					border: 1px solid var(--vscode-widget-border);
					border-left: 3px solid var(--vscode-charts-blue);
					margin: 4px 0;
					border-radius: 4px;
					overflow: hidden;
					transition: background-color 0.2s ease;
				}
				.notification:hover {
					background-color: var(--vscode-list-activeSelectionBackground);
				}
				.notification-header {
					padding: 4px 8px;
					background-color: var(--vscode-editor-selectionBackground);
					border-bottom: 1px solid var(--vscode-widget-border);
					text-align: center;
				}
				.notification-time {
					font-size: 10px;
					font-weight: bold;
					color: var(--vscode-charts-blue);
				}
				.notification-content {
					padding: 6px 8px;
				}
				.notification-title {
					font-size: 11px;
					font-weight: 500;
					color: var(--vscode-foreground);
					margin-bottom: 2px;
				}
				.no-notifications {
					color: var(--vscode-descriptionForeground);
					font-style: italic;
					text-align: center;
					padding: 20px;
					font-size: 11px;
				}
				.no-notifications button {
					margin-top: 8px;
					padding: 4px 8px;
					background: var(--vscode-button-background);
					color: var(--vscode-button-foreground);
					border: none;
					border-radius: 2px;
					cursor: pointer;
				}
				.settings-note {
					font-size: 9px;
					color: var(--vscode-descriptionForeground);
					text-align: center;
					margin-top: 8px;
					padding-top: 8px;
					border-top: 1px solid var(--vscode-widget-border);
				}
			</style>
			<script>
				const vscode = acquireVsCodeApi();
				function refresh() {
					vscode.postMessage({type: 'refresh'});
				}
			</script>
		</head>
		<body>
			<div class="header">
				<span class="header-title">Recent AI Prompts</span>
				<span class="header-count">Max: ${maxPrompts}</span>
			</div>
			${notificationsList}
			<div class="settings-note">
				Showing latest ${Math.min(this.prompts.length, maxPrompts)} prompts
			</div>
		</body>
		</html>`;
	}
}

export function activate(context: vscode.ExtensionContext) {
	console.log('SpecStory AutoSave + AI Copilot Prompt Detection is now active');
	
	// Initialize logging
	initializeLogging();
	writeLog('Extension activated');

	// Create status bar item
	statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
	updateStatusBar();
	statusBarItem.show();
	writeLog('Status bar created');

	// Register activity bar provider
	const provider = new RecentPromptsProvider(context.extensionUri);
	vscode.window.registerWebviewViewProvider(RecentPromptsProvider.viewType, provider);
	writeLog('Activity bar provider registered');

	// Watch for new SpecStory files across entire workspace
	const watcher = vscode.workspace.createFileSystemWatcher('**/.specstory/history/*.md');
	writeLog('File watcher created for pattern: **/.specstory/history/*.md');
	writeLog(`Workspace folders: ${vscode.workspace.workspaceFolders?.map(f => f.uri.fsPath).join(', ') || 'none'}`);
	
	// Check for existing SpecStory files at startup
	vscode.workspace.findFiles('**/.specstory/history/*.md').then(files => {
		writeLog(`Found ${files.length} existing SpecStory files at startup`);
		files.forEach(file => {
			writeLog(`Existing file: ${file.fsPath}`, 'DEBUG');
			if (isValidSpecStoryFile(file.fsPath)) {
				promptCount++;
				addRecentPrompt(file.fsPath);
			}
		});
		updateStatusBar();
		provider.refresh();
		writeLog(`Loaded ${promptCount} existing prompts`);
	});
	
	watcher.onDidCreate(uri => {
		writeLog(`File created event: ${uri.fsPath}`);
		// Validate this is actually a SpecStory export file
		if (isValidSpecStoryFile(uri.fsPath)) {
			promptCount++;
			writeLog(`New SpecStory export detected: ${path.basename(uri.fsPath)}`, 'INFO');
			addRecentPrompt(uri.fsPath);
			updateStatusBar();
			provider.refresh();
			showNotification();
			writeLog(`Prompt count updated to: ${promptCount}`);
		} else {
			writeLog(`Ignored non-SpecStory file: ${path.basename(uri.fsPath)}`, 'DEBUG');
		}
	});

	context.subscriptions.push(statusBarItem, watcher, outputChannel);
	writeLog('Extension activation complete');
}

function updateStatusBar(): void {
	const version = vscode.extensions.getExtension('sunamocz.specstory-autosave')?.packageJSON.version || '1.1.38';
	statusBarItem.text = `$(comment-discussion) ${promptCount} | v${version}`;
	statusBarItem.tooltip = 'SpecStory AutoSave + AI Copilot Prompt Detection';
}

function addRecentPrompt(filePath: string): void {
	const fileName = path.basename(filePath, '.md');
	writeLog(`Processing prompt file: ${fileName}`, 'DEBUG');
	
	const timeText = fileName.substring(0, 16).replace('_', ' '); // Extract date/time
	writeLog(`Extracted time text: "${timeText}"`, 'DEBUG');
	
	const newPrompt = `#1\n${timeText}`;
	recentPrompts.unshift(newPrompt);
	writeLog(`Added new prompt: "${newPrompt}"`, 'DEBUG');
	
	// Re-number all prompts so newest is always #1
	const config = vscode.workspace.getConfiguration('specstory-autosave');
	const maxPrompts = config.get<number>('maxPrompts', 10);
	
	recentPrompts = recentPrompts.slice(0, maxPrompts).map((prompt, index) => {
		const parts = prompt.split('\n');
		const numbered = `#${index + 1}\n${parts[1]}`;
		writeLog(`Renumbered prompt ${index}: "${numbered}"`, 'DEBUG');
		return numbered;
	});
	
	writeLog(`Final prompt list (${recentPrompts.length} items):`, 'DEBUG');
	recentPrompts.forEach((prompt, i) => {
		writeLog(`  [${i}]: "${prompt}"`, 'DEBUG');
	});
	
	writeLog(`Prompt list updated, showing ${recentPrompts.length} prompts (max: ${maxPrompts})`, 'INFO');
}

function showNotification(): void {
	const config = vscode.workspace.getConfiguration('specstory-autosave');
	const customMessage = config.get<string>('customMessage', '');
	
	if (customMessage.trim()) {
		vscode.window.showInformationMessage(`AI prompt detected\n${customMessage}`);
		writeLog(`Showed custom notification`, 'INFO');
	} else {
		vscode.window.showInformationMessage('AI prompt detected\nSpecStory conversation exported');
		writeLog('Showed default notification', 'INFO');
	}
}

export function deactivate() {
	writeLog('Extension deactivated');
	// Cleanup handled by subscriptions
}
