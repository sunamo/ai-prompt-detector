import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';

let statusBarItem: vscode.StatusBarItem;
let promptCount = 0;
let recentPrompts: string[] = [];
let logFile: string;
let outputChannel: vscode.OutputChannel;

function initializeLogging(): void {
	// Use fixed path that works for all users including guest accounts
	const logFolder = path.join('C:', 'temp', 'specstory-autosave-logs');
	
	if (!fs.existsSync(logFolder)) {
		fs.mkdirSync(logFolder, { recursive: true });
	}
	
	logFile = path.join(logFolder, `extension-${new Date().toISOString().split('T')[0]}.log`);
	outputChannel = vscode.window.createOutputChannel('SpecStory AutoSave + AI Copilot Prompt Detection');
	
	writeLog('Extension initialized', 'INFO');
}

function writeLog(message: string, level: 'INFO' | 'ERROR' | 'DEBUG' = 'INFO'): void {
	const config = vscode.workspace.getConfiguration('specstory-autosave');
	const enableDebugLogs = config.get<boolean>('enableDebugLogs', false);
	
	// Skip debug logs if disabled
	if (level === 'DEBUG' && !enableDebugLogs) {
		return;
	}
	
	const timestamp = new Date().toISOString();
	const logEntry = `[${timestamp}] ${level}: ${message}`;
	
	// Write to VS Code output channel
	outputChannel.appendLine(logEntry);
	
	// Write to temp file
	try {
		fs.appendFileSync(logFile, logEntry + '\n');
	} catch (error) {
		console.error('Failed to write log:', error);
	}
}

function isValidSpecStoryFile(filePath: string): boolean {
	try {
		const fileName = path.basename(filePath);
		writeLog(`Validating file: ${fileName}`, 'DEBUG');
		
		// Check if filename matches SpecStory pattern: YYYY-MM-DD_HH-mmZ-*.md
		const specStoryPattern = /^\d{4}-\d{2}-\d{2}_\d{2}-\d{2}Z-.+\.md$/;
		if (!specStoryPattern.test(fileName)) {
			writeLog(`File ${fileName} doesn't match SpecStory pattern`, 'DEBUG');
			return false;
		}
		
		writeLog(`File ${fileName} matches SpecStory pattern`, 'DEBUG');
		
		// Check if file exists and is readable
		if (!fs.existsSync(filePath)) {
			writeLog(`File ${fileName} doesn't exist`, 'DEBUG');
			return false;
		}
		
		// Check if file contains SpecStory header
		const content = fs.readFileSync(filePath, 'utf8');
		const hasSpecStoryMarker = content.includes('<!-- Generated by SpecStory -->') || 
		                          content.includes('_**User**_') || 
		                          content.includes('_**Assistant**_');
		
		writeLog(`File ${fileName} has SpecStory markers: ${hasSpecStoryMarker}`, 'DEBUG');
		return hasSpecStoryMarker;
	} catch (error) {
		writeLog(`Error validating SpecStory file ${filePath}: ${error}`, 'ERROR');
		return false;
	}
}

class RecentPromptsProvider implements vscode.TreeDataProvider<string> {
	private _onDidChangeTreeData: vscode.EventEmitter<string | undefined | null | void> = new vscode.EventEmitter<string | undefined | null | void>();
	readonly onDidChangeTreeData: vscode.Event<string | undefined | null | void> = this._onDidChangeTreeData.event;

	refresh(): void {
		this._onDidChangeTreeData.fire();
	}

	getTreeItem(element: string): vscode.TreeItem {
		const item = new vscode.TreeItem(element, vscode.TreeItemCollapsibleState.None);
		item.contextValue = 'promptItem';
		return item;
	}

	getChildren(): string[] {
		const config = vscode.workspace.getConfiguration('specstory-autosave');
		const maxPrompts = config.get<number>('maxPrompts', 10);
		const result = recentPrompts.slice(0, maxPrompts);
		writeLog(`TreeDataProvider getChildren called, returning ${result.length} items:`, 'DEBUG');
		result.forEach((item, i) => {
			writeLog(`  TreeItem[${i}]: "${item}"`, 'DEBUG');
		});
		return result;
	}
}

export function activate(context: vscode.ExtensionContext) {
	console.log('SpecStory AutoSave + AI Copilot Prompt Detection is now active');
	
	// Initialize logging
	initializeLogging();
	writeLog('Extension activated');

	// Create status bar item
	statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
	updateStatusBar();
	statusBarItem.show();
	writeLog('Status bar created');

	// Register activity bar provider
	const provider = new RecentPromptsProvider();
	vscode.window.registerTreeDataProvider('specstory-autosave-view', provider);
	writeLog('Activity bar provider registered');

	// Watch for new SpecStory files across entire workspace
	const watcher = vscode.workspace.createFileSystemWatcher('**/.specstory/history/*.md');
	writeLog('File watcher created for pattern: **/.specstory/history/*.md');
	writeLog(`Workspace folders: ${vscode.workspace.workspaceFolders?.map(f => f.uri.fsPath).join(', ') || 'none'}`);
	
	// Check for existing SpecStory files at startup
	vscode.workspace.findFiles('**/.specstory/history/*.md').then(files => {
		writeLog(`Found ${files.length} existing SpecStory files at startup`);
		files.forEach(file => {
			writeLog(`Existing file: ${file.fsPath}`, 'DEBUG');
			if (isValidSpecStoryFile(file.fsPath)) {
				promptCount++;
				addRecentPrompt(file.fsPath);
			}
		});
		updateStatusBar();
		provider.refresh();
		writeLog(`Loaded ${promptCount} existing prompts`);
	});
	
	watcher.onDidCreate(uri => {
		writeLog(`File created event: ${uri.fsPath}`);
		// Validate this is actually a SpecStory export file
		if (isValidSpecStoryFile(uri.fsPath)) {
			promptCount++;
			writeLog(`New SpecStory export detected: ${path.basename(uri.fsPath)}`, 'INFO');
			addRecentPrompt(uri.fsPath);
			updateStatusBar();
			provider.refresh();
			showNotification();
			writeLog(`Prompt count updated to: ${promptCount}`);
		} else {
			writeLog(`Ignored non-SpecStory file: ${path.basename(uri.fsPath)}`, 'DEBUG');
		}
	});

	context.subscriptions.push(statusBarItem, watcher, outputChannel);
	writeLog('Extension activation complete');
}

function updateStatusBar(): void {
	const version = vscode.extensions.getExtension('sunamocz.specstory-autosave')?.packageJSON.version || '1.1.38';
	statusBarItem.text = `$(comment-discussion) ${promptCount} | v${version}`;
	statusBarItem.tooltip = 'SpecStory AutoSave + AI Copilot Prompt Detection';
}

function addRecentPrompt(filePath: string): void {
	const fileName = path.basename(filePath, '.md');
	writeLog(`Processing prompt file: ${fileName}`, 'DEBUG');
	
	const timeText = fileName.substring(0, 16).replace('_', ' '); // Extract date/time
	writeLog(`Extracted time text: "${timeText}"`, 'DEBUG');
	
	const newPrompt = `#1\n${timeText}`;
	recentPrompts.unshift(newPrompt);
	writeLog(`Added new prompt: "${newPrompt}"`, 'DEBUG');
	
	// Re-number all prompts so newest is always #1
	const config = vscode.workspace.getConfiguration('specstory-autosave');
	const maxPrompts = config.get<number>('maxPrompts', 10);
	
	recentPrompts = recentPrompts.slice(0, maxPrompts).map((prompt, index) => {
		const parts = prompt.split('\n');
		const numbered = `#${index + 1}\n${parts[1]}`;
		writeLog(`Renumbered prompt ${index}: "${numbered}"`, 'DEBUG');
		return numbered;
	});
	
	writeLog(`Final prompt list (${recentPrompts.length} items):`, 'DEBUG');
	recentPrompts.forEach((prompt, i) => {
		writeLog(`  [${i}]: "${prompt}"`, 'DEBUG');
	});
	
	writeLog(`Prompt list updated, showing ${recentPrompts.length} prompts (max: ${maxPrompts})`, 'INFO');
}

function showNotification(): void {
	const config = vscode.workspace.getConfiguration('specstory-autosave');
	const customMessage = config.get<string>('customMessage', '');
	
	if (customMessage.trim()) {
		vscode.window.showInformationMessage(`AI prompt detected\n${customMessage}`);
		writeLog(`Showed custom notification`, 'INFO');
	} else {
		vscode.window.showInformationMessage('AI prompt detected\nSpecStory conversation exported');
		writeLog('Showed default notification', 'INFO');
	}
}

export function deactivate() {
	writeLog('Extension deactivated');
	// Cleanup handled by subscriptions
}
