import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';

let statusBarItem: vscode.StatusBarItem;
let sessionPromptCount = 0;  // Count prompts in current VS Code session
let recentPrompts: string[] = [];
let logFile: string;
let outputChannel: vscode.OutputChannel;

function initializeLogging(): void {
	// Use fixed path that works for all users including guest accounts
	const logFolder = path.join('C:', 'temp', 'specstory-autosave-logs');
	
	if (!fs.existsSync(logFolder)) {
		fs.mkdirSync(logFolder, { recursive: true });
	}
	
	logFile = path.join(logFolder, `extension-${new Date().toISOString().split('T')[0]}.log`);
	outputChannel = vscode.window.createOutputChannel('SpecStory AutoSave + AI Copilot Prompt Detection');
	
	writeLog('Extension initialized', 'INFO');
}

function writeLog(message: string, level: 'INFO' | 'ERROR' | 'DEBUG' = 'INFO'): void {
	const config = vscode.workspace.getConfiguration('specstory-autosave');
	const enableDebugLogs = config.get<boolean>('enableDebugLogs', false);
	
	// Skip only DEBUG logs if disabled, always write INFO and ERROR
	if (level === 'DEBUG' && !enableDebugLogs) {
		return;
	}
	
	const timestamp = new Date().toISOString();
	const logEntry = `[${timestamp}] ${level}: ${message}`;
	
	// Write to VS Code output channel
	if (outputChannel) {
		outputChannel.appendLine(logEntry);
	}
	
	// Write to temp file
	try {
		if (logFile) {
			fs.appendFileSync(logFile, logEntry + '\n');
		}
	} catch (error) {
		console.error('Failed to write log:', error);
	}
}

function isValidSpecStoryFile(filePath: string): boolean {
	try {
		const fileName = path.basename(filePath);
		writeLog(`Validating file: ${fileName}`, 'DEBUG');
		
		// Check if filename matches SpecStory pattern: YYYY-MM-DD_HH-mmZ-*.md
		const specStoryPattern = /^\d{4}-\d{2}-\d{2}_\d{2}-\d{2}Z-.+\.md$/;
		if (!specStoryPattern.test(fileName)) {
			writeLog(`File ${fileName} doesn't match SpecStory pattern`, 'DEBUG');
			return false;
		}
		
		writeLog(`File ${fileName} matches SpecStory pattern`, 'DEBUG');
		
		// Check if file exists and is readable
		if (!fs.existsSync(filePath)) {
			writeLog(`File ${fileName} doesn't exist`, 'DEBUG');
			return false;
		}
		
		// Check if file contains SpecStory header
		const content = fs.readFileSync(filePath, 'utf8');
		const hasSpecStoryMarker = content.includes('<!-- Generated by SpecStory -->') || 
		                          content.includes('_**User**_') || 
		                          content.includes('_**Assistant**_');
		
		writeLog(`File ${fileName} has SpecStory markers: ${hasSpecStoryMarker}`, 'DEBUG');
		return hasSpecStoryMarker;
	} catch (error) {
		writeLog(`Error validating SpecStory file ${filePath}: ${error}`, 'ERROR');
		return false;
	}
}

class RecentPromptsProvider implements vscode.WebviewViewProvider {
	public static readonly viewType = 'specstory-autosave-view';

	private _view?: vscode.WebviewView;
	private prompts: { number: string; shortPrompt: string; fullContent: string; }[] = [];

	constructor(private readonly _extensionUri: vscode.Uri) {}

	public resolveWebviewView(
		webviewView: vscode.WebviewView,
		context: vscode.WebviewViewResolveContext,
		_token: vscode.CancellationToken,
	) {
		this._view = webviewView;

		webviewView.webview.options = {
			enableScripts: true,
			localResourceRoots: [this._extensionUri]
		};

		webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);

		webviewView.webview.onDidReceiveMessage(data => {
			switch (data.type) {
				case 'refresh':
					writeLog('Manual refresh requested from activity bar', 'DEBUG');
					writeLog(`Activity bar refresh - searching in workspace folders:`, 'DEBUG');
					if (vscode.workspace.workspaceFolders) {
						vscode.workspace.workspaceFolders.forEach((folder, index) => {
							writeLog(`  Workspace ${index + 1}: ${folder.uri.fsPath}`, 'DEBUG');
						});
					}
					
					// Clear existing prompts and reload from all files
					recentPrompts = [];
					
					vscode.workspace.findFiles('**/.specstory/history/*.md').then(files => {
						writeLog(`Activity bar refresh: Found ${files.length} SpecStory files to process`, 'DEBUG');
						
		// Sort files by timestamp (newest first)
		const sortedFiles = files.sort((a, b) => {
			const nameA = path.basename(a.fsPath);
			const nameB = path.basename(b.fsPath);
			// Extract timestamp from filename for proper chronological sorting
			const timestampA = extractTimestampFromFileName(nameA);
			const timestampB = extractTimestampFromFileName(nameB);
			return timestampB.getTime() - timestampA.getTime(); // Newest first
		});						// Process all files to extract prompts
						sortedFiles.forEach(file => {
							writeLog(`Processing file: ${file.fsPath}`, 'DEBUG');
							if (isValidSpecStoryFile(file.fsPath)) {
								addRecentPrompt(file.fsPath);
							}
						});
						
						updateStatusBar();
						this.refreshFromPrompts();
						writeLog(`Refresh complete: ${recentPrompts.length} total prompts from ${sortedFiles.length} files`);
					});
					break;
			}
		});
	}

	public refresh(): void {
		this.refreshFromPrompts();
	}

	private refreshFromPrompts(): void {
		// Apply maxPrompts limit and convert to display format
		const config = vscode.workspace.getConfiguration('specstory-autosave');
		const maxPrompts = config.get<number>('maxPrompts', 50);
		
		writeLog(`refreshFromPrompts called with ${recentPrompts.length} total prompts`, 'DEBUG');
		
		// Take only the most recent prompts
		const limitedPrompts = recentPrompts.slice(0, maxPrompts);
		
		writeLog(`Limited to ${limitedPrompts.length} prompts (max: ${maxPrompts})`, 'DEBUG');
		
		// Convert to display format with proper numbering
		this.prompts = limitedPrompts.map((prompt, index) => {
			const shortPrompt = prompt.length > 120 ? prompt.substring(0, 120) + '...' : prompt;
			writeLog(`Creating prompt #${index + 1}: "${shortPrompt.substring(0, 50)}..."`, 'DEBUG');
			return {
				number: `#${index + 1}`,
				shortPrompt: shortPrompt,
				fullContent: prompt
			};
		});
		
		writeLog(`Activity bar will show ${this.prompts.length} prompts`, 'DEBUG');
		this._updateView();
	}

	private _updateView(): void {
		if (this._view) {
			this._view.webview.html = this._getHtmlForWebview(this._view.webview);
			writeLog('Activity Bar view updated', 'DEBUG');
		}
	}

	private _getHtmlForWebview(webview: vscode.Webview): string {
		const notificationsList = this.prompts.length > 0 
			? this.prompts.map((prompt, index) => {
				return `<div class="notification">
					<div class="notification-header">
						<span class="notification-time">${prompt.number}</span>
					</div>
					<div class="notification-content">
						<div class="notification-title">${prompt.shortPrompt}</div>
					</div>
				</div>`;
			}).join('')
			: '<div class="no-notifications">No AI prompts detected yet...<br><button onclick="refresh()">ðŸ”„ Refresh</button></div>';

		const config = vscode.workspace.getConfiguration('specstory-autosave');
		const maxPrompts = config.get<number>('maxPrompts', 50);

		return `<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			<title>AI Activity</title>
			<style>
				body {
					font-family: var(--vscode-font-family);
					font-size: var(--vscode-font-size);
					line-height: 1.4;
					color: var(--vscode-foreground);
					background-color: var(--vscode-editor-background);
					margin: 0;
					padding: 8px;
				}
				.header {
					display: flex;
					justify-content: space-between;
					align-items: center;
					margin-bottom: 8px;
					padding-bottom: 8px;
					border-bottom: 1px solid var(--vscode-widget-border);
				}
				.header-title {
					font-size: 12px;
					font-weight: bold;
					color: var(--vscode-foreground);
				}
				.header-count {
					font-size: 10px;
					color: var(--vscode-descriptionForeground);
				}
				.notification {
					background-color: var(--vscode-list-hoverBackground);
					border: 1px solid var(--vscode-widget-border);
					border-left: 3px solid var(--vscode-charts-blue);
					margin: 4px 0;
					border-radius: 4px;
					overflow: hidden;
					transition: background-color 0.2s ease;
				}
				.notification:hover {
					background-color: var(--vscode-list-activeSelectionBackground);
				}
				.notification-header {
					padding: 4px 8px;
					background-color: var(--vscode-editor-selectionBackground);
					border-bottom: 1px solid var(--vscode-widget-border);
					text-align: center;
				}
				.notification-time {
					font-size: 10px;
					font-weight: bold;
					color: var(--vscode-charts-blue);
				}
				.notification-content {
					padding: 6px 8px;
				}
				.notification-title {
					font-size: 11px;
					font-weight: 500;
					color: var(--vscode-foreground);
					margin-bottom: 2px;
				}
				.no-notifications {
					color: var(--vscode-descriptionForeground);
					font-style: italic;
					text-align: center;
					padding: 20px;
					font-size: 11px;
				}
				.no-notifications button {
					margin-top: 8px;
					padding: 4px 8px;
					background: var(--vscode-button-background);
					color: var(--vscode-button-foreground);
					border: none;
					border-radius: 2px;
					cursor: pointer;
				}
				.settings-note {
					font-size: 9px;
					color: var(--vscode-descriptionForeground);
					text-align: center;
					margin-top: 8px;
					padding-top: 8px;
					border-top: 1px solid var(--vscode-widget-border);
				}
			</style>
			<script>
				const vscode = acquireVsCodeApi();
				function refresh() {
					vscode.postMessage({type: 'refresh'});
				}
			</script>
		</head>
		<body>
			<div class="header">
				<span class="header-title">Recent AI Prompts</span>
				<span class="header-count">Max: ${maxPrompts}</span>
			</div>
			${notificationsList}
			<div class="settings-note">
				Showing latest ${Math.min(this.prompts.length, maxPrompts)} prompts
			</div>
		</body>
		</html>`;
	}
}

export async function activate(context: vscode.ExtensionContext) {
	console.log('SpecStory AutoSave + AI Copilot Prompt Detection is now active');
	
	// Force immediate log write to test
	const timestamp = new Date().toISOString();
	const testLogEntry = `[${timestamp}] INFO: EXTENSION ACTIVATION STARTED - v1.1.26`;
	try {
		const logFolder = path.join('C:', 'temp', 'specstory-autosave-logs');
		if (!fs.existsSync(logFolder)) {
			fs.mkdirSync(logFolder, { recursive: true });
		}
		const logFile = path.join(logFolder, `extension-${new Date().toISOString().split('T')[0]}.log`);
		fs.appendFileSync(logFile, testLogEntry + '\n');
	} catch (error) {
		console.error('Failed test log write:', error);
	}
	
	// Initialize logging with forced write
	initializeLogging();
	writeLog('Extension activated - ' + new Date().toLocaleString(), 'INFO');
	console.log('Extension activated - logs initialized');

	// Create status bar item
	statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
	updateStatusBar();
	statusBarItem.show();
	writeLog('Status bar created', 'INFO');

	// Register activity bar provider
	const provider = new RecentPromptsProvider(context.extensionUri);
	vscode.window.registerWebviewViewProvider(RecentPromptsProvider.viewType, provider);
	writeLog('Activity bar provider registered', 'INFO');

	// Register refresh command
	const refreshCommand = vscode.commands.registerCommand('specstory-autosave.refresh', async () => {
		writeLog('Manual refresh command executed', 'INFO');
		writeLog(`Searching in workspace folders:`, 'INFO');
		if (vscode.workspace.workspaceFolders) {
			vscode.workspace.workspaceFolders.forEach((folder, index) => {
				writeLog(`  Workspace ${index + 1}: ${folder.uri.fsPath}`, 'INFO');
			});
		}
		
		// Clear existing prompts and reload from all files
		recentPrompts = [];
		
		try {
			const files = await vscode.workspace.findFiles('**/.specstory/history/*.md');
			writeLog(`Refresh: Found ${files.length} SpecStory files to process`, 'INFO');
			
			// Sort files by timestamp (newest first)
			const sortedFiles = files.sort((a, b) => {
				const nameA = path.basename(a.fsPath);
				const nameB = path.basename(b.fsPath);
				const timestampA = extractTimestampFromFileName(nameA);
				const timestampB = extractTimestampFromFileName(nameB);
				return timestampB.getTime() - timestampA.getTime();
			});
			
			// Process all files to extract prompts
			sortedFiles.forEach(file => {
				writeLog(`Refresh: Processing file: ${file.fsPath}`, 'DEBUG');
				if (isValidSpecStoryFile(file.fsPath)) {
					addRecentPrompt(file.fsPath);
				}
			});
			
			updateStatusBar();
			provider.refresh();
			writeLog(`Refresh complete: ${recentPrompts.length} total prompts loaded`, 'INFO');
		} catch (error) {
			writeLog(`Error during refresh: ${error}`, 'ERROR');
		}
	});

	// Watch for new SpecStory files across entire workspace
	const watcher = vscode.workspace.createFileSystemWatcher('**/.specstory/history/*.md');
	writeLog('File watcher created for pattern: **/.specstory/history/*.md');
	writeLog(`Workspace folders: ${vscode.workspace.workspaceFolders?.map(f => f.uri.fsPath).join(', ') || 'none'}`);
	
	// Check for existing SpecStory files at startup
	writeLog('Starting search for SpecStory files...', 'INFO');
	writeLog(`Current workspace folders:`, 'INFO');
	if (vscode.workspace.workspaceFolders) {
		vscode.workspace.workspaceFolders.forEach((folder, index) => {
			writeLog(`  Workspace ${index + 1}: ${folder.uri.fsPath}`, 'INFO');
		});
	} else {
		writeLog('  No workspace folders found!', 'INFO');
	}
	
	try {
		const files = await vscode.workspace.findFiles('**/.specstory/history/*.md');
		writeLog(`Found ${files.length} existing SpecStory files at startup`, 'INFO');
		
		if (files.length > 0) {
			writeLog(`Files found:`, 'INFO');
			files.forEach((file, index) => {
				writeLog(`  ${index + 1}. ${file.fsPath}`, 'INFO');
			});
		} else {
			writeLog('No SpecStory files found in current workspace', 'INFO');
			// Try alternative patterns to debug
			const altFiles = await vscode.workspace.findFiles('**/*specstory*/**/*.md');
			writeLog(`Alternative search (*specstory*) found ${altFiles.length} files`, 'INFO');
			if (altFiles.length > 0) {
				altFiles.forEach((file, index) => {
					writeLog(`  Alt ${index + 1}. ${file.fsPath}`, 'INFO');
				});
			}
			
			// Try searching for any .md files in .specstory folders
			const anyMdFiles = await vscode.workspace.findFiles('**/.specstory/**/*.md');
			writeLog(`Any .md files in .specstory folders: ${anyMdFiles.length}`, 'INFO');
			if (anyMdFiles.length > 0) {
				anyMdFiles.forEach((file, index) => {
					writeLog(`  MD ${index + 1}. ${file.fsPath}`, 'INFO');
				});
			}
		}
		
		// Sort files by timestamp (newest first)
		const sortedFiles = files.sort((a, b) => {
			const nameA = path.basename(a.fsPath);
			const nameB = path.basename(b.fsPath);
			// Extract timestamp from filename for proper chronological sorting
			const timestampA = extractTimestampFromFileName(nameA);
			const timestampB = extractTimestampFromFileName(nameB);
			return timestampB.getTime() - timestampA.getTime(); // Newest first
		});
		
		// Process all files to extract prompts
		sortedFiles.forEach(file => {
			writeLog(`Existing file: ${file.fsPath}`, 'INFO');
			if (isValidSpecStoryFile(file.fsPath)) {
				addRecentPrompt(file.fsPath);
				// Don't increment sessionPromptCount for existing files - only for new ones in this session
			}
		});
		
		updateStatusBar();
		provider.refresh(); // This will load prompts into activity bar
		writeLog(`Loaded ${recentPrompts.length} total prompts from ${sortedFiles.length} files`, 'INFO');
		writeLog(`Session prompts: ${sessionPromptCount}, Total prompts: ${recentPrompts.length}`, 'INFO');
	} catch (error) {
		writeLog(`Error loading existing SpecStory files: ${error}`, 'ERROR');
	}
	
	watcher.onDidCreate(uri => {
		writeLog(`File created event: ${uri.fsPath}`);
		// Validate this is actually a SpecStory export file
		if (isValidSpecStoryFile(uri.fsPath)) {
			writeLog(`New SpecStory export detected: ${path.basename(uri.fsPath)}`, 'INFO');
			addRecentPrompt(uri.fsPath);
			sessionPromptCount++; // Increment session prompt count
			updateStatusBar();
			provider.refresh();
			showNotification();
			writeLog(`Session prompts: ${sessionPromptCount}, total prompts: ${recentPrompts.length}`);
		} else {
			writeLog(`Ignored non-SpecStory file: ${path.basename(uri.fsPath)}`, 'DEBUG');
		}
	});

	context.subscriptions.push(statusBarItem, watcher, outputChannel, refreshCommand);
	writeLog('Extension activation complete');
}

function updateStatusBar(): void {
	const version = vscode.extensions.getExtension('sunamocz.specstory-autosave')?.packageJSON.version || '1.1.28';
	statusBarItem.text = `$(comment-discussion) ${sessionPromptCount} prompts | v${version}`;
	statusBarItem.tooltip = `SpecStory AutoSave + AI Copilot Prompt Detection - ${sessionPromptCount} prompts in current session`;
}

function addRecentPrompt(filePath: string): void {
	try {
		writeLog(`Processing SpecStory file: ${filePath}`, 'DEBUG');
		
		// Read and parse the SpecStory file content
		const content = fs.readFileSync(filePath, 'utf8');
		writeLog(`File content length: ${content.length} characters`, 'DEBUG');
		
		const extractedPrompts = extractPromptsFromContent(content);
		
		writeLog(`Extracted ${extractedPrompts.length} prompts from ${path.basename(filePath)}`, 'DEBUG');
		
		// Log each prompt being added
		extractedPrompts.forEach((prompt, index) => {
			writeLog(`Adding prompt ${index + 1}: "${prompt.substring(0, 100)}..."`, 'DEBUG');
		});
		
		// Add all prompts from this file to the end (maintain file order: newest file first)
		// Since files are processed newest first, and prompts within file are already newest first,
		// we append each file's prompts to maintain proper chronological order
		extractedPrompts.forEach(prompt => {
			recentPrompts.push(prompt);
		});
		
		writeLog(`Total prompts after adding file: ${recentPrompts.length}`, 'DEBUG');
		
	} catch (error) {
		writeLog(`Error processing SpecStory file ${filePath}: ${error}`, 'ERROR');
	}
}

function extractTimestampFromFileName(fileName: string): Date {
	// Extract timestamp from SpecStory filename like "2025-08-03_07-59Z-description.md"
	const match = fileName.match(/(\d{4}-\d{2}-\d{2})_(\d{2})-(\d{2})Z/);
	if (match) {
		const [, date, hour, minute] = match;
		const [year, month, day] = date.split('-').map(Number);
		return new Date(year, month - 1, day, Number(hour), Number(minute), 0);
	}
	
	// Fallback to epoch time if parsing fails (will be sorted last)
	return new Date(0);
}

function extractPromptsFromContent(content: string): string[] {
	const prompts: string[] = [];
	
	try {
		writeLog(`Starting extraction from content (${content.length} chars)`, 'DEBUG');
		
		// Split content by user/assistant markers
		const sections = content.split(/(?=_\*\*User\*\*_|_\*\*Assistant\*\*_)/);
		writeLog(`Split content into ${sections.length} sections`, 'DEBUG');
		
		for (let i = 0; i < sections.length; i++) {
			const section = sections[i];
			// Look for user sections
			if (section.includes('_**User**_')) {
				writeLog(`Processing user section ${i + 1}`, 'DEBUG');
				
				// Extract text after the user marker
				const lines = section.split('\n');
				const userPrompt: string[] = [];
				let foundUserMarker = false;
				
				for (const line of lines) {
					if (line.includes('_**User**_')) {
						foundUserMarker = true;
						writeLog(`Found User marker in line: "${line.trim()}"`, 'DEBUG');
						continue;
					}
					
					if (foundUserMarker) {
						// Stop at separator or assistant marker
						if (line.includes('---') || line.includes('_**Assistant**_')) {
							writeLog(`Stopping at separator/assistant marker: "${line.trim()}"`, 'DEBUG');
							break;
						}
						
						// Add non-empty lines to prompt
						const trimmedLine = line.trim();
						if (trimmedLine) {
							userPrompt.push(trimmedLine);
						}
					}
				}
				
				// Join the prompt lines and add if not empty
				if (userPrompt.length > 0) {
					const fullPrompt = userPrompt.join(' ').trim();
					if (fullPrompt.length > 0) {
						prompts.push(fullPrompt);
						writeLog(`Extracted prompt (${fullPrompt.length} chars): "${fullPrompt.substring(0, 100)}..."`, 'DEBUG');
					}
				}
			}
		}
		
		// CRITICAL: Reverse prompts so newest prompts in file come first
		// In SpecStory files, prompts are chronological (oldest first), but we want newest first
		const reversedPrompts = prompts.reverse();
		writeLog(`Successfully extracted and reversed ${reversedPrompts.length} user prompts`, 'DEBUG');
		
		return reversedPrompts;
		
	} catch (error) {
		writeLog(`Error extracting prompts from content: ${error}`, 'ERROR');
	}
	
	return prompts;
}

function showNotification(): void {
	const config = vscode.workspace.getConfiguration('specstory-autosave');
	const customMessage = config.get<string>('customMessage', '');
	
	if (customMessage.trim()) {
		vscode.window.showInformationMessage(`AI prompt detected\n${customMessage}`);
		writeLog(`Showed custom notification`, 'INFO');
	} else {
		vscode.window.showInformationMessage('AI prompt detected\nSpecStory conversation exported');
		writeLog('Showed default notification', 'INFO');
	}
}

export function deactivate() {
	writeLog('Extension deactivated');
	// Cleanup handled by subscriptions
}
