/**
 * ƒåITELNOST: Soubor mus√≠ z≈Østat v≈ædy plnƒõ ƒçiteln√Ω pro program√°tora.
 * ≈Ω√°dn√© umƒõl√© zkracov√°n√≠ ≈ô√°dk≈Ø, sluƒçov√°n√≠ nesouvisej√≠c√≠ch p≈ô√≠kaz≈Ø na jeden ≈ô√°dek
 * ani minifikace. Sn√≠≈æen√≠ poƒçtu ≈ô√°dk≈Ø bez jasn√©ho, zdokumentovan√©ho zlep≈°en√≠
 * ƒçitelnosti je REGRESE a mus√≠ b√Ωt vr√°ceno. Zachov√°vej logick√© bloky a vertik√°ln√≠ strukturu.
 */

import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';

let channel: vscode.OutputChannel;
let dailyPath = '';
let debugEnabled = false;

<<<<<<< HEAD
// Naƒçte nastaven√≠, zda je povolen podrobn√Ω (debug) log
function refreshDebug() { debugEnabled = vscode.workspace.getConfiguration('ai-prompt-detector').get<boolean>('enableDebugLogs', false) || false; }

/**
 * Inicializace loggeru ‚Äì vytvo≈ôen√≠ v√Ωstupn√≠ho kan√°lu, reset denn√≠ho log souboru
 * a registrace posluchaƒçe na zmƒõnu konfigurace.
 */
export function initLogger(): void {
	channel = vscode.window.createOutputChannel('SpecStory Prompts');
	refreshDebug();
	const dir = LOG_DIR;
	try { if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true }); } catch {}
	const today = new Date().toISOString().slice(0,10);
	dailyPath = path.join(dir, `extension-${today}.log`);
	try { fs.writeFileSync(dailyPath, ''); } catch {}
	info(`üßπ Cleared daily log file ${dailyPath}`);
	freshCheck();
	vscode.workspace.onDidChangeConfiguration(e => { if (e.affectsConfiguration('ai-prompt-detector.enableDebugLogs')) refreshDebug(); });
}

// N√≠zk√° √∫rove≈à ‚Äì zap√≠≈°e ≈ô√°dek do kan√°lu i do souboru
function append(msg: string) {
	channel.appendLine(msg);
	try { fs.appendFileSync(dailyPath, `[${new Date().toISOString()}] ${msg}\n`); } catch {}
}

// Ve≈ôejn√© funkce logov√°n√≠ (info, error, debug)
=======
/** Aktualizuje p≈ô√≠znak povolen√≠ debug v√Ωpis≈Ø z konfigurace. */
function refreshDebug() {
  debugEnabled = vscode
    .workspace
    .getConfiguration('ai-prompt-detector')
    .get<boolean>('enableDebugLogs', false) || false;
}

/** Inicializuje logger: v√Ωstupn√≠ kan√°l + denn√≠ soubor v dostupn√© slo≈æce. */
export function initLogger() {
  channel = vscode.window.createOutputChannel('SpecStory Prompts');
  refreshDebug();
  const dir = 'E:/vs/TypeScript_Projects/_/logs';
  try {
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
  } catch {}
  dailyPath = path.join(
    dir,
    'ai-prompt-detector-' + new Date().toISOString().slice(0, 10) + '.log'
  );
  try { fs.writeFileSync(dailyPath, ''); } catch {}
  info('Log init - logging to: ' + dailyPath);
  vscode.workspace.onDidChangeConfiguration((e) => {
    if (e.affectsConfiguration('ai-prompt-detector.enableDebugLogs')) refreshDebug();
  });
}

/** Zap√≠≈°e ≈ô√°dek do v√Ωstupn√≠ho kan√°lu i souboru. */
function append(m: string) {
  channel.appendLine(m);
  try {
    const now = new Date();
    const localTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().replace('T', ' ').slice(0, -5);
    fs.appendFileSync(
      dailyPath,
      `[${localTime}] ${m}\n`
    );
  } catch {}
}

/** Info log ‚Äì v≈ædy se vyp√≠≈°e. */
>>>>>>> refs/remotes/origin/master
export function info(m: string) { append(m); }

/** Debug log ‚Äì vyp√≠≈°e se jen kdy≈æ je zapnuta volba enableDebugLogs. */
export function debug(m: string) { if (debugEnabled) append(m); }

<<<<<<< HEAD
// Kompatibiln√≠ alias pro star≈°√≠ k√≥d pou≈æ√≠vaj√≠c√≠ writeLog(message,isDebug)
export function writeLog(message: string, isDebug: boolean) { if (isDebug) { debug(message); } else { info(message); } }

// Kontrola ƒçerstvosti log souboru (diagnostika)
function freshCheck() {
	try { const st = fs.statSync(dailyPath); const age = Date.now() - st.mtime.getTime(); if (age > 5*60*1000) { error(`‚ùå Log file too old (${Math.round(age/1000)}s)`); } else { debug(`‚úÖ Log fresh (${age}ms)`); } } catch {}
=======
/** Chybov√Ω log ‚Äì v≈ædy se vyp√≠≈°e (nen√≠ zde separ√°tn√≠ √∫rove≈à). */
export function error(m: string) { append(m); }

/**
 * Inicializuje logger s mo≈ænost√≠ p≈ôep√≠nat debug v√Ωpisy.
 */
export class Logger {
  /** Zap√≠≈°e ≈ô√°dek do v√Ωstupn√≠ho kan√°lu i souboru. */
  private static append(m: string) {
    channel.appendLine(m);
    try {
      const now = new Date();
      const localTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().replace('T', ' ').slice(0, -5);
      fs.appendFileSync(
        dailyPath,
        `[${localTime}] ${m}\n`
      );
    } catch {}
  }

  /** Info log ‚Äì v≈ædy se vyp√≠≈°e. */
  public static info(m: string) { Logger.append(m); }

  /** Debug log ‚Äì vyp√≠≈°e se jen kdy≈æ je zapnuta volba enableDebugLogs. */
  public static debug(m: string) { if (debugEnabled) Logger.append(m); }

  /** Chybov√Ω log ‚Äì v≈ædy se vyp√≠≈°e (nen√≠ zde separ√°tn√≠ √∫rove≈à). */
  public static error(m: string) { Logger.append(m); }
>>>>>>> refs/remotes/origin/master
}
