/**
 * Example usage of the new onDidSubmitInput event API
 * This shows how the AI Prompt Detector extension would use the API
 * once the patch is applied to VS Code
 */

import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
    console.log('AI Prompt Detector activating with new API...');
    
    // Check if the new API is available
    const vscodeExtended = vscode as any;
    if (!vscodeExtended.chat?.onDidSubmitInput) {
        vscode.window.showWarningMessage(
            'Chat submission API not available. Please ensure VS Code is running with the patch applied and --enable-proposed-api flag.'
        );
        return;
    }
    
    // Counter for tracking submissions
    let promptCounter = 0;
    const statusBarItem = vscode.window.createStatusBarItem(
        vscode.StatusBarAlignment.Right,
        100
    );
    statusBarItem.text = `ðŸ¤– AI Prompts: ${promptCounter}`;
    statusBarItem.show();
    
    // Subscribe to the new event
    const disposable = vscodeExtended.chat.onDidSubmitInput((event: any) => {
        console.log('Chat submission detected!', {
            prompt: event.prompt,
            location: event.location,
            sessionId: event.sessionId,
            inputMethod: event.isKeyboard ? 'keyboard' : 'mouse'
        });
        
        // Increment counter
        promptCounter++;
        statusBarItem.text = `ðŸ¤– AI Prompts: ${promptCounter}`;
        
        // Show notification
        const inputMethod = event.isKeyboard ? 'keyboard' : 'mouse';
        vscode.window.showInformationMessage(
            `AI Prompt sent via ${inputMethod}: "${event.prompt.substring(0, 50)}..."`
        );
        
        // Log to extension output
        const outputChannel = vscode.window.createOutputChannel('AI Prompt Detector');
        outputChannel.appendLine(`[${new Date().toISOString()}] Prompt submitted`);
        outputChannel.appendLine(`  Method: ${inputMethod}`);
        outputChannel.appendLine(`  Location: ${event.location}`);
        outputChannel.appendLine(`  Session: ${event.sessionId || 'N/A'}`);
        outputChannel.appendLine(`  Prompt: ${event.prompt}`);
        outputChannel.appendLine('---');
    });
    
    context.subscriptions.push(disposable);
    context.subscriptions.push(statusBarItem);
    
    console.log('âœ… AI Prompt Detector activated with mouse detection support!');
}

export function deactivate() {
    console.log('AI Prompt Detector deactivated');
}

/**
 * Benefits of this approach over current workarounds:
 * 
 * 1. âœ… Detects ALL submissions (keyboard AND mouse)
 * 2. âœ… No polling or performance overhead
 * 3. âœ… Clean, official API (no hacks)
 * 4. âœ… Access to full prompt text
 * 5. âœ… Knows input method (keyboard vs mouse)
 * 6. âœ… Works across all chat locations
 * 7. âœ… No clipboard interference
 * 8. âœ… No command interception needed
 * 9. âœ… Future-proof solution
 * 10. âœ… Simple to implement
 */